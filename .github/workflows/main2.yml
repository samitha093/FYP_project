name: Build release packages arm and x86/x64

on:
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86, x64, arm]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Set up Node.js
        uses: actions/setup-node@v2.4.0
        with:
          node-version: 16

      - name: Install Node dependencies
        run: cd web_app && yarn install

      - name: Build project with Yarn
        run: cd web_app && yarn build

      - name: Create templates directory if not exists
        run: mkdir -p child_cart/api/templates

      - name: Copy files to child_cart/api/templates
        run: cp -r web_app/dist/* child_cart/api/templates

      - name: Install TensorFlow
        run: pip install tensorflow==2.12

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Build C_main
        if: matrix.arch == 'arm'
        run: pyinstaller --onefile --add-data "child_cart/api/templates:child_cart/api/templates" --name C_main_arm.bin C_main.py
        # Add any necessary setup for ARM compilation here

      - name: Build P_main
        if: matrix.arch == 'arm'
        run: pyinstaller --onefile --add-data "child_cart/api/templates:child_cart/api/templates" --name P_main_arm.bin P_main.py
        # Add any necessary setup for ARM compilation here

      - name: Build C_main
        if: matrix.arch == 'x86' || matrix.arch == 'x64'
        run: pyinstaller --onefile --add-data "child_cart/api/templates:child_cart/api/templates" --name C_main.bin C_main.py

      - name: Build P_main
        if: matrix.arch == 'x86' || matrix.arch == 'x64'
        run: pyinstaller --onefile --add-data "child_cart/api/templates:child_cart/api/templates" --name P_main.bin P_main.py

      - name: Rename C_main and P_main binaries
        run: |
          if [[ ${{ matrix.arch }} == 'arm' ]]; then
            mv dist/C_main_arm.bin dist/C_main_${{ matrix.arch }}.bin
            mv dist/P_main_arm.bin dist/P_main_${{ matrix.arch }}.bin
          else
            mv dist/C_main.bin dist/C_main_${{ matrix.arch }}.bin
            mv dist/P_main.bin dist/P_main_${{ matrix.arch }}.bin
          fi

      - name: Read Version Number
        id: version
        run: echo ::set-output name=VERSION::$(cat version.txt)

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          release_name: v${{ steps.version.outputs.VERSION }}

      - name: check list of files
        run: |
          ls
          cd dist
          ls

      - name: Upload C_main Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/C_main_${{ matrix.arch }}.bin
          asset_name: C_main_${{ matrix.arch }}.bin
          asset_content_type: application/octet-stream

      - name: Upload P_main Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/P_main_${{ matrix.arch }}.bin
          asset_name: P_main_${{ matrix.arch }}.bin
          asset_content_type: application/octet-stream
